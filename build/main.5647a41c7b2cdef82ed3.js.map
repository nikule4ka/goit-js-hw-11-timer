{"version":3,"sources":["webpack:///./js/refs.js","webpack:///./index.js"],"names":["document","getElementById","querySelector","christmassDay","constructor","selector","targetDate","this","timer","days","hours","mins","secs","start","myTimer","setInterval","timeBetween","Date","now","x","mathTime","textContent","time","pad","Math","floor","value","String","padStart","console","log"],"mappings":"mIACWA,SAASC,eAAe,YACzBD,SAASE,cAAc,2BACtBF,SAASE,cAAc,4BACxBF,SAASE,cAAc,2BACvBF,SAASE,cAAc,2BCgDjC,MAAMC,EAAgB,IAjDtB,MACIC,aAAY,SAACC,EAAD,WAAWC,IACnBC,KAAKD,WAAaA,EAClBC,KAAKC,MAAQR,SAASC,eAAeI,GACrCE,KAAKE,KAAOT,SAASE,cAAc,2BACnCK,KAAKG,MAAQV,SAASE,cAAc,4BACpCK,KAAKI,KAAOX,SAASE,cAAc,2BACnCK,KAAKK,KAAOZ,SAASE,cAAc,2BAIvCW,QACIN,KAAKO,UAELC,YAAY,KACZR,KAAKO,WACF,KAGPA,UACI,IAAIE,EAAcT,KAAKD,WAAaW,KAAKC,MACzC,MAAMC,EAAIZ,KAAKa,SAASJ,GAOxBT,KAAKE,KAAKY,YAAcF,EAAEV,KAC1BF,KAAKG,MAAMW,YAAcF,EAAET,MAC3BH,KAAKI,KAAKU,YAAcF,EAAER,KAC1BJ,KAAKK,KAAKS,YAAcF,EAAEP,KAG9BQ,SAASE,GAMT,MAAO,CAAEb,KALQF,KAAKgB,IAAIC,KAAKC,MAAMH,EAAO,QAK7BZ,MAJGH,KAAKgB,IAAIC,KAAKC,MAAOH,EAAO,MAAR,OAIhBX,KAHLJ,KAAKgB,IAAIC,KAAKC,MAAOH,EAAO,KAAR,MAGTV,KAFXL,KAAKgB,IAAIC,KAAKC,MAAOH,EAAO,IAAe,OAK5DC,IAAIG,GACA,OAAOC,OAAOD,GAAOE,SAAS,EAAG,OAKA,CACvCvB,SAAU,WACRC,WAAY,IAAIW,KAAK,kBAGzBY,QAAQC,IAAI3B,EAAcG,YAE1BH,EAAcU,U","file":"main.5647a41c7b2cdef82ed3.js","sourcesContent":["export default {\n    timer: document.getElementById('#timer-1'),\n    days: document.querySelector('span[data-value=\"days\"]'),\n    hours: document.querySelector('span[data-value=\"hours\"]'),\n    mins: document.querySelector('span[data-value=\"mins\"]'),\n    secs: document.querySelector('span[data-value=\"secs\"]')\n}","import './styles.css';\nimport refs from './js/refs';\n// // console.log(refs);\n\nclass CountdownTimer {\n    constructor({selector, targetDate}) {\n        this.targetDate = targetDate;\n        this.timer = document.getElementById(selector);\n        this.days = document.querySelector('span[data-value=\"days\"]');\n        this.hours = document.querySelector('span[data-value=\"hours\"]');\n        this.mins = document.querySelector('span[data-value=\"mins\"]');\n        this.secs = document.querySelector('span[data-value=\"secs\"]');\n\n    }\n\n    start() {\n        this.myTimer();\n\n        setInterval(() => {\n        this.myTimer();\n        }, 1000)\n    }\n    \n    myTimer() {\n        let timeBetween = this.targetDate - Date.now();\n        const x = this.mathTime(timeBetween);\n\n        // console.log(this.targetDate)\n        // console.log(Date.now())\n        // console.log(timeBetween)\n        // console.log(x)\n\n        this.days.textContent = x.days;\n        this.hours.textContent = x.hours;\n        this.mins.textContent = x.mins;\n        this.secs.textContent = x.secs;\n\n    }\n    mathTime(time) {\n        const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n    }\n\n    pad(value) {\n        return String(value).padStart(2, '0')\n    }\n}\n\n\nconst christmassDay = new CountdownTimer({\n  selector: '#timer-1',\n    targetDate: new Date('Dec 25, 2020'),\n});\n\nconsole.log(christmassDay.targetDate)\n\nchristmassDay.start();\n\n// let christmasDay = `Dec 25 2020`\n\n\n// function mathTime(time) {\n//     const days = Math.floor(time / (1000 * 60 * 60 * 24));\n//     const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n//     const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n//     const secs = Math.floor((time % (1000 * 60)) / 1000);\n\n//     return { days, hours, mins, secs };\n// };\n\n// function myTimer(date) {\n//     let timeBetween = new Date(date) - Date.now();\n//     // console.log(timeBetween);\n//     const x = mathTime(timeBetween);\n    \n\n//     refs.days.textContent = x.days;\n//     refs.hours.textContent = x.hours;\n//     refs.mins.textContent = x.mins;\n//     refs.secs.textContent = x.secs;\n// }\n\n\n//  setInterval(() => {\n//     myTimer(christmasDay);\n// }, 1000)"],"sourceRoot":""}